"""
Django settings for myproject project.
Generated by 'django-admin startproject' using Django 3.2.7.
For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/
For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""


from pathlib import Path
from datetime import timedelta
import os
from celery.schedules import crontab
#import wordpress_api
#import social_django

try:
   import social_django as social_django
except ImportError:
    import pip
    pip.main(['install', 'social-auth-app-django'])


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-uczo%0a!buj4$0n(6@3tyd#3!5@vkwcwc*0rlw6(urb0j4f@aj'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['.dashoapp.com','159.89.160.157','localhost','127.0.0.1', '143.110.245.55']


#BASE_URL = "http://127.0.0.1:8000"# development
BASE_URL ="https://dashoapp.com/" #production

#The above lines needs to be changed accordingly in production and developmentenvironment

AUTH_USER_MODEL = 'account.Account'
AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.AllowAllUsersModelBackend',
    'account.backends.CaseInsensitiveModelBackend',
    'social_core.backends.google.GoogleOAuth2',
    'django.contrib.auth.backends.ModelBackend',
    'social_core.backends.facebook.FacebookOAuth2',
    )


# Application definition

INSTALLED_APPS = [
    'chat',
    'channels',
    'messageapp',
    'dashboardapp',
    'onlineregistration',
    'institute',
    'connect',
    'event',
    'grade',
    'rest_framework_swagger',
    'drf_yasg',
    'account.apps.AccountConfig',
    'accountAPIs.apps.AccountapisConfig',
    'tickets.apps.TicketsConfig',
    'course.apps.CourseConfig',
    'syllabus.apps.SyllabusConfig',
    'noticeboard.apps.NoticeboardConfig',
    'home.apps.HomeConfig',
    'eclass.apps.EclassConfig',
    'book.apps.BookConfig',
    'meeting.apps.MeetingConfig',
    'assignment.apps.AssignmentConfig',
    'exam.apps.ExamConfig',
    'allnotification.apps.AllnotificationConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt.token_blacklist',
    'django_filters',
    'corsheaders',
    'storages',
    'django.contrib.postgres',
    'social_django',
    'socialsso', 
    'rest_framework.authtoken',
    'rest_framework_simplejwt',
]

class LogMiddleware:
    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):
        print(f"Request Headers: {request.headers}")
        response = self.get_response(request)
        return response
    
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django_ratelimit.middleware.RatelimitMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'social_django.middleware.SocialAuthExceptionMiddleware',
]

ROOT_URLCONF = 'myproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,"templates"),'/home/sammy/myprojectdir/dashboard/templates',os.path.join(BASE_DIR,"build")],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',
            ],
        },
    },
]

WP_URL = 'http://your-wordpress-app.com/'
BLOG_POSTS_PER_PAGE = 5


WSGI_APPLICATION = 'myproject.wsgi.application'

ASGI_APPLICATION = 'myproject.asgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases
DATABASES = {
            'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': 'myproject',
            'USER': 'myprojectuser',
            'PASSWORD': 'password',
            'HOST': 'localhost', #localhost 143.110.245.55
            'PORT': '',          #BLANK 5432
            'TEST': {
                    'NAME': 'myproject',  # Use the same database name for testing
                    'MIRROR': 'default',  # Mirrors the default database configuration
                }

        },
                    }
            # }



# DATABASES = {
#             'default': {
#             'ENGINE': 'django.db.backends.postgresql_psycopg2',
#             'NAME': 'myproject',
#             'USER': 'myprojectuser',
#             'PASSWORD': 'password',
#             'HOST': 'localhost',
#             'PORT': '',
#                     }
#             }


#DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.sqlite3',
#        'NAME': BASE_DIR / 'db.sqlite3',
#    }
#}



# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


#CHANNEL_LAYERS = {
#    "default": {
#        "BACKEND": "channels_redis.core.RedisChannelLayer",
#        "CONFIG": {
#            "hosts": [('edresearchweb_redis_1', 6379)],
#        },
#    },
#}

#CELERY_BROKER_URL = 'redis://edresearchweb_redis_1:6379/0'
#CELERY_RESULT_BACKEND = 'redis://edresearchweb_redis_1:6379/0'

# CELERY_BROKER_URL = "redis://broker:6379/0"
# CELERY_BROKER_URL = "redis://broker:6379/0"
CELERY_BROKER_URL = "redis://localhost:6379/0" #localhost
CELERY_BROKER_URL = "redis://localhost:6379/0" #localhost
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'
CELERY_BEAT_SCHEDULE = {
    'delete-old-profiles-every-day': {
        'task': 'accountAPIs.tasks.delete_old_profiles',
        'schedule': crontab(minute=0, hour=0), # run once every day (in seconds)
    },
    'send-test-email-every-day': {
        'task': 'accountAPIs.tasks.send_test_email',
        'schedule': crontab(minute=0, hour=0),  # run once every day (in seconds)
    },
    'create-daily-attendance': {
        'task': 'institute.tasks.create_daily_attendance',
        'schedule': crontab(minute=0, hour=0),  # Runs every day at midnight
        # 'schedule': crontab(minute='*/1'), # Run every minute
    },
    # 'create-class-attendance-every-day': {
    #     'task': 'course.tasks.create_class_attendance',
    #     'schedule': crontab(hour=0, minute=0),  # Runs every day at midnight
    #     # 'schedule': crontab(minute='*/1'), # Run every minute
    # },
    'update-assignment-status-daily': {
        'task': 'assignment.tasks.update_assignment_status',
        'schedule': crontab(hour=0, minute=0),  # Runs daily at midnight
        # 'schedule': crontab(minute='*/1'), # Run every minute
    },  
    'create-institute-batch-attendance-daily': {
        'task': 'institute.tasks.create_institute_batch_attendance',
        'schedule': crontab(hour=0, minute=0),  # Runs daily at midnight
        # 'schedule': crontab(minute='*/1'),  # Uncomment this to run every minute for testing purposes
    },   
    'update-institute-attendance-daily': {
        'task': 'institute.tasks.update_attendance_status',
        'schedule': crontab(hour=0, minute=0),  # Runs daily at midnight
        # 'schedule': crontab(minute='*/1'),  # Uncomment this to run every minute for testing purposes
    },   
}



#Celery Configuration

#from celery import Celery
#app = Celery('myproject')
#app.config_from_object('django.conf:settings', namespace='CELERY')
#app.autodiscover_tasks(lambda: settings.INSTALLED_APPS)



# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True
CCOUNT_SID="AC95ed97b175076fb59b269d019a51fa67"
AUTH_TOKEN="ea5bc54822e20cd39c6bb2e23c639267"
USE_TZ = True

ALWAYS_UPLOAD_FILES_TO_AWS=False

#This means you are uploding to AWS even when running locally

#if BASE_URL=="http://127.0.0.1:8000":#http://webapp.diracai.com

AWS_ACCESS_KEY_ID='UCW66UXZOVY3QVYQLSEK'
AWS_SECRET_ACCESS_KEY='TJi4SulSCtEU5RlHWsKkOpFoL0Qo/qVf5JB6Dcg8rWk'
AWS_STORAGE_BUCKET_NAME='edrspace'
AWS_S3_ENDPOINT_URL='https://sgp1.digitaloceanspaces.com'
AWS_S3_OBJECT_PARAMETERS = {
      'CacheControl': 'max-age=86400',
   }
AWS_LOCATION='edrcontainer1'
STATIC_URL = 'https://%s/%s/'%(AWS_S3_ENDPOINT_URL,AWS_LOCATION)
STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'


# settings.py
FILE_UPLOAD_MAX_MEMORY_SIZE = 52428800  # 50 MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 52428800  # 50 MB

#if ALWAYS_UPLOAD_FILES_TO_AWS:    
#   AWS_ACCESS_KEY_ID='UCW66UXZOVY3QVYQLSEK'
#   AWS_SECRET_ACCESS_KEY='TJi4SulSCtEU5RlHWsKkOpFoL0Qo/qVf5JB6Dcg8rWk'
#   AWS_STORAGE_BUCKET_NAME='edrspace'
#   AWS_S3_ENDPOINT_URL='https://sgp1.digitaloceanspaces.com'
#   AWS_S3_OBJECT_PARAMETERS = {
#      'CacheControl': 'max-age=86400',
#   }
#   AWS_LOCATION='edrcontainer1'
#   STATIC_URL = 'https://%s/%s/'%(AWS_S3_ENDPOINT_URL,AWS_LOCATION)
#   STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
#   DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

#twillio credentials to send SMS to phone
ACCOUNT_SID="AC95ed97b175076fb59b269d019a51fa67"
AUTH_TOKEN="ea5bc54822e20cd39c6bb2e23c639267"




#to be used if you load files locally
if not ALWAYS_UPLOAD_FILES_TO_AWS:
  STATIC_URL = '/static/'

MEDIA_URL = '/media/'



STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
    os.path.join(BASE_DIR, 'media'),
   # os.path.join(BASE_DIR,'build/static')
]






#STATIC_ROOT = os.path.join(BASE_DIR, 'static_cdn')
MEDIA_ROOT = os.path.join(BASE_DIR, 'media_cdn')


SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'basic': {
            'type': 'basic'
        }
    },
    'USE_SESSION_AUTH': False,
    'JSON_EDITOR': True,
    'DEFAULT_MODEL_RENDERING': 'model',
    'SHOW_REQUEST_HEADERS': True,
    'VALIDATOR_URL': None,
    'DEFAULT_AUTO_SCHEMA_CLASS': 'rest_framework_swagger.inspectors.SwaggerAutoSchema',
}


REST_FRAMEWORK = {
 #   'DEFAULT_AUTHENTICATION_CLASSES': (
 # 'rest_framework.authentication.SessionAuthentication',
 # ),

   'DEFAULT_PERMISSION_CLASSES': [ 'rest_framework.permissions.AllowAny', ],

   'DEFAULT_AUTHENTICATION_CLASSES': ('rest_framework_simplejwt.authentication.JWTAuthentication',),

   'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
   
   #'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
   #'PAGE_SIZE': 2

   # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
   # 'PAGE_SIZE': 10,  # Number of items per page

}

#AllowAny
#IsAuthenticated
#IsAdminUser
#IsAuthenticatedOrReadOnly
# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#if DEBUG:
#    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

#https://myaccount.google.com/lesssecureapps
#https://accounts.google.com/b/0/displayunlockcaptcha
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = '587'#'465';#'587'
EMAIL_HOST_USER = 'diracai.info@gmail.com'
EMAIL_HOST_PASSWORD = 'fibmduvwoxsjtjvh'
EMAIL_USE_TLS = True

CORS_ALLOWED_ORIGINS = [
        'http://localhost:3000','https://app.diracai.com','https://google.com'
]



'''
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=10),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': False,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUTH_HEADER_TYPES': ('JWT',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
}
'''
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60000),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=50),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': False,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,

    'AUTH_HEADER_TYPES': ('JWT',),  # Changed from 'JWT' to 'Bearer'
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}


# Add social authentication keys (you need to get these from your Google Developer Console)
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = '463706544061-qoshash7ju1pg8uudjaor5fjeqs6kb2f.apps.googleusercontent.com'
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = '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'

SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = ['email', 'profile']

# Set the login redirect URL
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

# Add URL configurations for social-auth-app-django
SOCIAL_AUTH_URL_NAMESPACE = 'social'

SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.social_user',
    'social_core.pipeline.user.get_username',
    'social_core.pipeline.social_auth.associate_by_email',
    'social_core.pipeline.user.create_user',
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details',
    'socialsso.pipeline.save_email',
)
